{"version":3,"file":"static/js/838.565c5886.chunk.js","mappings":"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","sources":["../node_modules/@mui/system/esm/Box/Box.js","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","import styled from '@emotion/styled';\n\nexport const LoginFormStyled = styled.form(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  gap: '16px',\n  width: '280px',\n  position: 'absolute',\n  top: '100px',\n  left: '50%',\n  transform: 'translateX(-50%)',\n  textAlign: 'center',\n  [theme.breakpoints.up('tablet')]: {\n    width: '608px',\n    top: 'calc((100vh - 490px) / 2)',\n    backgroundColor: 'white',\n    boxShadow: '7px 4px 14px rgba(0, 0, 0, 0.11)',\n    borderRadius: '40px',\n    padding: '60px 80px',\n  },\n  [theme.breakpoints.up('desktop')]: {\n    width: '618px',\n  },\n}));\n","import React from 'react';\nimport { useLogInUserMutation } from 'redux/user/userApi';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport {\n  Button,\n  CircularProgress,\n  FormControl,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  Typography,\n} from '@mui/material';\nimport { Visibility, VisibilityOff } from '@mui/icons-material';\nimport { Box } from '@mui/system';\nimport { LoginFormStyled } from './LoginForm.styled';\nimport { OutlinedInputStyled } from 'components/Inputs/OutlinedInput.styled';\n\nconst validationSchema = Yup.object({\n  email: Yup.string()\n    .email('Invalid email address')\n    .matches(\n      /^([a-zA-Z0-9])+([a-zA-Z0-9._-]+)@[a-zA-Z0-9]+([.-]?[a-zA-Z0-9]+)\\.[a-zA-Z]{2,}$/,\n      'Invalid email address'\n    )\n    .min(10, 'Email must include more tnan 10 characters')\n    .max(63, 'Email must be less tnan 63 characters')\n    .required('This is a required field'),\n  password: Yup.string()\n    .matches(/^[^\\s]+(^\\s.*)?$/, \"Password can't include whitespace\")\n    .min(7, 'Password must include more tnan 7 characters')\n    .max(32, 'Password must be less tnan 32 characters')\n    .required('This is a required field'),\n});\n\nexport const LoginForm = () => {\n  const [logInUser, { isLoading, isFetching }] = useLogInUserMutation();\n  const [showPassword, setShowPassword] = React.useState(false);\n  const navigate = useNavigate();\n\n  const handleClickShowPassword = () => setShowPassword(show => !show);\n\n  const handleMouseDownPassword = event => {\n    event.preventDefault();\n  };\n\n  const onSubmit = async (values, actions) => {\n    const { email, password } = values;\n\n    try {\n      const { user } = await logInUser({\n        email,\n        password,\n      }).unwrap();\n\n      Notify.success(`Hello, ${user.name}`);\n\n      navigate('/user');\n    } catch (error) {\n      console.log(error);\n      Notify.failure(error.data.message);\n    }\n\n    actions.setSubmitting(false);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n  });\n\n  return (\n    <>\n      {isLoading || isFetching ? (\n        <Box display=\"flex\" justifyContent=\"center\" marginTop=\"50px\">\n          <CircularProgress color=\"primary\" size={75} />\n        </Box>\n      ) : (\n        <LoginFormStyled onSubmit={formik.handleSubmit}>\n          <Typography variant=\"h3\" sx={{ mb: '40px' }}>\n            Login\n          </Typography>\n          <FormControl variant=\"outlined\">\n            <OutlinedInputStyled\n              name=\"email\"\n              type=\"text\"\n              placeholder=\"Email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.email && Boolean(formik.errors.email)}\n              aria-describedby=\"component-email-error\"\n            />\n            <FormHelperText id=\"component-email-error\">\n              {formik.errors.email}\n            </FormHelperText>\n          </FormControl>\n          <FormControl variant=\"outlined\">\n            <OutlinedInputStyled\n              name=\"password\"\n              type={showPassword ? 'text' : 'password'}\n              endAdornment={\n                <InputAdornment position=\"end\">\n                  <IconButton\n                    aria-label=\"toggle password visibility\"\n                    onClick={handleClickShowPassword}\n                    onMouseDown={handleMouseDownPassword}\n                    edge=\"end\"\n                  >\n                    {showPassword ? <VisibilityOff /> : <Visibility />}\n                  </IconButton>\n                </InputAdornment>\n              }\n              placeholder=\"Password\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              error={formik.touched.password && Boolean(formik.errors.password)}\n              aria-describedby=\"component-password-error\"\n            />\n            <FormHelperText id=\"component-password-error\">\n              {formik.errors.password}\n            </FormHelperText>\n          </FormControl>\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            size=\"large\"\n            sx={{ borderRadius: '20px', width: '100%' }}\n          >\n            Login\n          </Button>\n        </LoginFormStyled>\n      )}\n    </>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n"],"names":["createBox","LoginFormStyled","styled","_ref","_ref2","theme","display","flexDirection","gap","width","position","top","left","transform","textAlign","_defineProperty","breakpoints","up","backgroundColor","boxShadow","borderRadius","padding","validationSchema","Yup","email","matches","min","max","required","password","LoginForm","_useLogInUserMutation","useLogInUserMutation","_useLogInUserMutation2","_slicedToArray","logInUser","_useLogInUserMutation3","isLoading","isFetching","_React$useState","React","_React$useState2","showPassword","setShowPassword","navigate","useNavigate","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","actions","_yield$logInUser$unwr","user","wrap","_context","prev","next","unwrap","sent","Notify","concat","name","t0","console","log","data","message","setSubmitting","stop","_x","_x2","apply","arguments","formik","useFormik","initialValues","_jsx","_Fragment","children","Box","justifyContent","marginTop","CircularProgress","color","size","_jsxs","handleSubmit","Typography","variant","sx","mb","FormControl","OutlinedInputStyled","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","FormHelperText","id","endAdornment","InputAdornment","IconButton","onClick","show","onMouseDown","event","preventDefault","edge","VisibilityOff","Visibility","Button"],"sourceRoot":""}